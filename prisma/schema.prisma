generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Setup {
  step    String
  version Int    @default(0)

  @@id([step, version])
}

model KanjidicEntry {
  id             String                    @id
  onReadings     String[]
  kunReadings    String[]
  tag            String?
  definitions    String[]
  meta           Json?
  figureReadings KanjisenseFigureReading[] @relation("kanjidicEntry")
}

model Unihan15 {
  id                String                    @id
  kDefinition       String?
  kCantonese        String[]
  kHangul           String[]
  kHanyuPinlu       String[]
  kHanyuPinyin      String[]
  kJapaneseKun      String[]
  kJapaneseOn       String[]
  kKorean           String[]
  kMandarin         String[]
  kTang             String[]
  kTGHZ2013         String[]
  kVietnamese       String[]
  kXHC1983          String[]
  kRSAdobe_Japan1_6 String[]
  kRSUnicode        String[]
  figureReadings    KanjisenseFigureReading[] @relation("unihan15")
}

model Unihan12 {
  id        String   @id
  kZVariant String[]
}

model Unihan14 {
  id                          String   @id
  kSemanticVariant            String[]
  kSimplifiedVariant          String[]
  kSpecializedSemanticVariant String[]
  kTraditionalVariant         String[]
  kZVariant                   String[]
}

model KanjiDbComposition {
  id            String  @id
  ids           String?
  etymology     String?
  sbgySyllables Int[]
}

model KanjiDbSbgyNote {
  character String
  syllable  Int
  text      String

  @@id([character, syllable])
}

model KanjiDbVariant {
  variant     String
  base        String
  variantType KanjiDbVariantType

  @@id([variant, base, variantType])
}

model SbgyXiaoyun {
  xiaoyun        Int      @id
  exemplars      String[]
  fanqie         String
  initial        String
  cycleHead      String
  tone           String
  kaihe          String?
  note           String?
  dengOrChongniu String?

  figureReadings KanjisenseFigureReadingToSbgyXiaoyun[]
}

model ScriptinAozoraFrequency {
  character   String @id
  appearances Int
  fraction    Float
  rank        Int
}

model KanjisenseVariantGroup {
  id                     String             @id
  key                    String
  version                Int
  // keys
  variants               String[]
  // built after variants are set
  figures                KanjisenseFigure[]
  hasStandaloneCharacter Boolean            @default(false)
}

model KanjisenseFigureRelation {
  id                    String            @id
  key                   String
  version               Int
  variantGroupId        String?
  directUses            String[]
  listsAsComponent      String[]
  isPriorityCandidate   Boolean
  idsText               String
  selectedIdsComponents String[]
  figure                KanjisenseFigure?
}

model KanjiDbCharacterDerivation {
  character       String   @id
  chain           Json
  phoneticOrigins String[]
}

model KanjisenseFigure {
  id                    String                   @id
  key                   String
  version               Int
  keyword               String
  isPriority            Boolean
  isStandaloneCharacter Boolean                  @default(false)
  isPriorityComponent   Boolean                  @default(false)
  isPrioritySoundMark   Boolean                  @default(false)
  listsAsComponent      String[]
  listsAsCharacter      String[]
  shinjitaiInBaseKanji  String?
  aozoraAppearances     Int
  // aozoraAppearancesCountingVariants Int
  activeSoundMarkValue  String?
  variantGroupId        String?
  componentsTree        Json?
  shuowenImageId        String?
  mnemonicKeyword       String?
  activeSoundMarkId     String?
  asComponent           KanjisenseComponent?     @relation("asComponent")
  firstClassUses        KanjisenseComponentUse[] @relation("firstClassUses")
  firstClassComponents  KanjisenseComponentUse[] @relation("firstClassComponents")
  activeSoundMark       KanjisenseComponent?     @relation("activeSoundMark", fields: [activeSoundMarkId], references: [id])
  relation              KanjisenseFigureRelation @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image                 KanjisenseFigureImage?
  glyphImage            GlyphImage?
  shuowenImage          ShuowenImage?            @relation(fields: [shuowenImageId], references: [id])
  variantGroup          KanjisenseVariantGroup?  @relation(fields: [variantGroupId], references: [id])
  meaning               KanjisenseFigureMeaning?
  reading               KanjisenseFigureReading? @relation(fields: [readingId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  // identical to id, but needed to allow figures to be deleted without deleting readings during updates
  readingId             String?                  @unique
  allComponents         KanjisenseComponent[]    @relation("allComponents")

  searchProperties SearchPropertiesOnFigure[]

  @@index([version])
}

model KanjisenseComponent {
  id              String             @id
  key             String
  version         Int
  componentFigure KanjisenseFigure   @relation("asComponent", fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  soundMarkUses   KanjisenseFigure[] @relation("activeSoundMark")
  allUses         KanjisenseFigure[] @relation("allComponents")
}

model KanjisenseComponentUse {
  componentId        String
  parentId           String
  indexInTree        Int
  appearanceInParent Int
  component          KanjisenseFigure @relation("firstClassUses", fields: [componentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent             KanjisenseFigure @relation("firstClassComponents", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([componentId, parentId, appearanceInParent])
}

model KanjisenseFigureReading {
  id                            String            @id
  key                           String
  version                       Int
  sbgyXiaoyunsMatchingExemplars Json?
  inferredOnReadingCandidates   Json
  kanjidicEntryId               String?
  unihan15Id                    String?
  figure                        KanjisenseFigure?

  kanjidicEntry      KanjidicEntry?                         @relation("kanjidicEntry", fields: [kanjidicEntryId], references: [id])
  unihan15           Unihan15?                              @relation("unihan15", fields: [unihan15Id], references: [id])
  sbgyXiaoyuns       KanjisenseFigureReadingToSbgyXiaoyun[]
  selectedOnReadings String[]
}

model KanjisenseFigureReadingToSbgyXiaoyun {
  figureReadingId String
  figureReading   KanjisenseFigureReading @relation(fields: [figureReadingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sbgyXiaoyunId   Int
  sbgyXiaoyun     SbgyXiaoyun             @relation(fields: [sbgyXiaoyunId], references: [xiaoyun], onDelete: Cascade, onUpdate: Cascade)

  @@id([figureReadingId, sbgyXiaoyunId])
}

model KanjisenseFigureMeaning {
  id               String           @id
  key              String
  version          Int
  unihanDefinition String?
  kanjidicEnglish  String[]
  figure           KanjisenseFigure @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model KanjisenseFigureImage {
  id      String                    @id
  key     String
  version Int
  type    KanjisenseFigureImageType

  content Json
  figure  KanjisenseFigure @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum KanjisenseFigureImageType {
  Kvg
  GlyphWiki
}

model ShuowenImage {
  id      String             @id
  version Int
  paths   String[]
  figures KanjisenseFigure[]
}

model GlyphImage {
  id      String           @id
  key     String
  version Int
  json    Json
  figure  KanjisenseFigure @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  notes     Note[]
  password  Password?
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum KanjisenseComponentUseTag {
  directMeaningless
  directMeaninglessSound
  meaningfulIndirect
  meaningfulIndirectSound
  sound
}

enum KanjiDbVariantType {
  VariationSelectorVariant
  CjkviVariant
  OldStyle
  NewStyle
  Borrowed
  TwEduVariant
  HanyuDaCidianVariant
  HanyuDaCidianVariantReverse
}

model JmDictEntry {
  id          Int    @id @default(autoincrement())
  head        String
  readingText String

  @@index([head])
  @@index([readingText])
}

model FigureSearchProperty {
  type    FigureSearchPropertyType
  // text for calculating match
  text    String
  // extra text parsed according to type
  display String

  version Int @default(0)

  figures SearchPropertiesOnFigure[]

  key String @id

  @@unique([type, text, display, version])
}

model SearchPropertiesOnFigure {
  figure            KanjisenseFigure     @relation(fields: [figureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  figureId          String
  searchProperty    FigureSearchProperty @relation(fields: [searchPropertyKey], references: [key], onDelete: Cascade, onUpdate: Cascade)
  searchPropertyKey String

  version Int @default(0)

  // index for sorting
  index Int

  @@id([figureId, searchPropertyKey, version])
}

enum FigureSearchPropertyType {
  KEY
  VARIANT
  ONYOMI_KANA
  ONYOMI_LATIN
  KUNYOMI_KANA
  KUNYOMI_LATIN
  KUNYOMI_KANA_WITH_OKURIGANA
  KUNYOMI_LATIN_WITH_OKURIGANA
  KUNYOMI_KANA_MINUS_OKURIGANA
  KUNYOMI_LATIN_MINUS_OKURIGANA
  TRANSLATION_ENGLISH
  MNEMONIC_ENGLISH
}

model BaseCorpusText {
  id Int @id

  course String

  key              String
  title            String?
  author           String?
  source           String
  section          String?
  dynasty          String?
  urls             String[]
  text             String
  normalizedText   String
  normalizedLength Int

  nonPriorityCharactersCount Int @default(0)

  uniqueCharacters CharacterUsagesOnBaseCorpusText[]
  uniqueComponents ComponentUsagesOnBaseCorpusText[]
}

model CharacterUsagesOnBaseCorpusText {
  character        String
  baseCorpusTextId Int
  baseCorpusText   BaseCorpusText @relation(fields: [baseCorpusTextId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  frequencyScore                           Int
  baseCorpusTextLength                     Int
  baseCorpusUniqueCharactersCount          Int
  baseCorpusUniqueComponentsCount          Int
  baseCorpusTextNonPriorityCharactersCount Int @default(0)

  @@id([baseCorpusTextId, character])
}

model ComponentUsagesOnBaseCorpusText {
  figureKey        String
  baseCorpusTextId Int
  baseCorpusText   BaseCorpusText @relation(fields: [baseCorpusTextId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  frequencyScore                  Int
  baseCorpusTextLength            Int
  baseCorpusUniqueCharactersCount Int
  baseCorpusUniqueComponentsCount Int

  @@id([baseCorpusTextId, figureKey])
}

model Course {
  id String @id

  // only for curator
  authors                   String[] @default([])
  sources                   String[] @default([])
  seenTexts                 Json?
  normalizedTextSearchQuery String   @default("")
  wantedCharacters          String   @default("")
  minLength                 Int?
  maxLength                 Int?
}
